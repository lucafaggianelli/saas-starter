// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  email          String       @unique
  hashedPassword String?
  role           GlobalRole   @default(CUSTOMER)
  memberships    Membership[]

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Token {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql

enum TokenType {
  RESET_PASSWORD
}

model Organization {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  membership Membership[]
  projects     Project[]
}

model Membership {
  id   String         @id @default(auto()) @map("_id") @db.ObjectId
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String @db.ObjectId

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model Project {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
